---
- name: 'create ssh dir for root'
  file: dest=/root/.ssh mode=0700 owner=root group=root state=directory
  tags:
    - sshkey
    - tower

- name: 'create ssh dir for user'
  file: dest={{ home_dir }}/.ssh
        mode=0700
        owner={{ ansible_user }}
        group={{ ansible_user }}
        state=directory
  tags:
    - sshkey
    - tower

- name: 'generate key'
  command: ssh-keygen -f /root/.ssh/{{ ansible_ssh_key }} -t rsa -N '' -q
  args:
    creates: /root/.ssh/{{ ansible_ssh_key }}
  when: inventory_hostname == primary_machine
  tags:
    - sshkey
    - tower

- name: 'install authorized key'
  shell: cat /root/.ssh/{{ ansible_ssh_key }}.pub >> {{ home_dir }}/.ssh/authorized_keys
  when: inventory_hostname == primary_machine
  ignore_errors: yes
  tags:
    - sshkey

- name: 'install authorized key'
  command: cp /root/.ssh/{{ ansible_ssh_key }}.pub /root/.ssh/authorized_keys
  when: inventory_hostname == primary_machine
  ignore_errors: yes
  tags:
    - sshkey

- name: 'fetch ssh key'
  fetch: src={{ home_dir }}/.ssh/authorized_keys dest=/tmp/{{primary_machine}}.pub flat=yes
  when: inventory_hostname == primary_machine
  tags:
    - sshkey
    - keycopy

- name: 'place ssh key'
  copy: src=/tmp/{{ primary_machine }}.pub dest=/root/.ssh/authorized_keys mode=0600
  when: secondary_machine is defined and inventory_hostname == secondary_machine
  tags:
    - sshkey
    - keycopy

- name: 'place ssh key'
  copy: src=/tmp/{{primary_machine}}.pub dest={{ home_dir }}/.ssh/authorized_keys mode=0600
  when: secondary_machine is defined and inventory_hostname == secondary_machine
  tags:
    - sshkey
    - keycopy
    - tower

- name: 'setup config for ssh'
  copy: src=config dest=/root/.ssh/config owner=root group=root
  tags:
    - sshkey
    - tower

- name: 'generate known host record primary_machine'
  shell: ssh-keyscan -H {{ hostvars[primary_machine][ 'ansible_all_ipv4_addresses' ][1] }} >> /root/.ssh/known_hosts
  changed_when: yes
  tags:
    - sshkey
    - tower

- name: 'generate known host record secondary_machine'
  shell: ssh-keyscan -H {{ hostvars[secondary_machine][ 'ansible_eth0' ]['ipv4']['address'] }} >> /root/.ssh/known_hosts
  #shell: ssh-keyscan -H {{ secondary_machine }} >> /root/.ssh/known_hosts
  when: secondary_machine is defined
  tags:
    - sshkey
    - tower

- name: 'make sure .bashrc exists'
  become: no
  file: path=~/.bashrc state=touch
  tags:
    - umask
    - tower

- name: 'fix permissions'
  file: dest={{ temp_dir }}/{{ tower_name }} recurse=yes owner={{ ansible_user }}
  tags:
    - tower


- name: 'set umask to 022'
  lineinfile: dest=/root/.bashrc line='umask 022' state=present
  tags:
    - umask

- name: 'set umask to 022'
  become: no
  lineinfile: dest=~/.bashrc line='umask 022' state=present
  tags:
    - umask
    - tower

- name: 'figure out if ansible is present'
  command: 'ansible --version'
  changed_when: no
  ignore_errors: yes
  register: present_version_ok
  tags:
    - rpm
    - tower

- name: 'install bundled rpm for ansible core'
  yum: name='{{ ansible_rpm }}' state=present
  when: present_version_ok|failed
  tags:
    - tower
    - rpm

- name: 'install python library rpms'
  yum: name={{ item }} state=present
  with_items: '{{ python_libs }}'
  tags:
    - tower
    - python_pips
    - rpm

- name: 'pip install more Ansible Core dependencies'
  pip: name={{ item }} state=present
  with_items: '{{ python_pips }}'
  ignore_errors: yes
  tags:
    - tower
    - python_pips

- name: 'place inventory file'
  template: src=inventory.j2 dest={{ temp_dir }}/{{ tower_name }}/inventory
            owner={{ ansible_user}}
  tags:
    - tower
    - towerconfig

- name: 'place configuration file'
  template: src=tower_setup_conf.yml.j2 dest={{ temp_dir }}/{{ tower_name }}/tower_setup_conf.yml
            owner={{ ansible_user }}
  tags:
    - tower
    - towerconfig

- name: 'place configuration file'
  template: src=ansible.cfg.j2 dest={{ temp_dir }}/{{ tower_name }}/ansible.cfg
            owner={{ ansible_user }}
  tags:
    - tower
    - towerconfig

- name: 'run setup'
  become: yes
  command: bash -lc "cd {{ temp_dir }}/{{ tower_name }} && bash ./setup.sh -e pg_port=5432 -e pg_host={{ pg_host }}"
  when: inventory_hostname == primary_machine
  tags:
    - tower
    - towerconfig
    - setup

- name: 'disable proot because auditd will choke on it'
  lineinfile: dest=/etc/tower/settings.py
              regexp="^AWX_PROOT_ENABLED"
              line="AWX_PROOT_ENABLED = False"
              state=present
  tags:
    - tower
    - towerconfig
    - setup
    - proot

- name: 'disable Pendo tracking'
  lineinfile: dest=/etc/tower/settings.py
              regexp="^PENDO_TRACKING_STATE"
              line="PENDO_TRACKING_STATE = 'off'"
              state=present
  tags:
    - tower
    - towerconfig
    - setup

- name: 'restart tower for new settings'
  command: ansible-tower-service restart
  changed_when: yes
  tags:
    - tower
    - towerconfig
    - setup

- name: 'test tower listening socket'
  wait_for: host=localhost timeout=30
  tags:
    - tower
    - towerconfig
    - test
    - setup

- name: 'Deploy/Enable LDAP Configuration for Tower'
  template: src=ldap.py.j2 dest=/etc/tower/conf.d/ldap.py backup=no
  become: yes
  when: enable_ldap == True
  tags:
    - tower
    - towerconfig
    - setup
    - ldap

- name: 'Create a backup cronjob'
  cron: name="create backup" minute="0,30" hour="*" job="cd {{ temp_dir }}/{{ tower_name }} && bash ./setup.sh -b"
  when: inventory_hostname == primary_machine
  tags:
    - tower
    - towerconfig
    - cron

- name: 'Setup a branded logo'
  copy: src=custom_console_logo.png
        dest=/var/lib/awx/public/static/assets/custom_console_logo.png
        owner=awx
  tags:
    - branding

- name: 'Create local settings file'
  copy: src=local_settings.json dest=/var/lib/awx/public/static/local_settings.json
        owner=awx
  tags:
    - branding
